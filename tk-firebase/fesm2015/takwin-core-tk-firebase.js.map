{"version":3,"file":"takwin-core-tk-firebase.js","sources":["../../projects/tk-firebase/src/lib/tk-firebase.service.ts","../../projects/tk-firebase/src/lib/tk-firebase.module.ts","../../../projects/tk-firebase/src/public-api.ts","../../../projects/tk-firebase/src/takwin-core-tk-firebase.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport {AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument, QueryFn} from '@angular/fire/firestore';\r\nimport { Observable } from 'rxjs';\r\nimport {map, tap} from 'rxjs/operators';\r\nimport {Entity} from './entity.model';\r\n\r\n\r\n// We need a function that will turn our JS Objects into an Object\r\n// that Firestore can work with\r\nfunction firebaseSerialize<T>(object: T) {\r\n  return JSON.parse(JSON.stringify(object));\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class TkFirebaseService<T extends Entity> {\r\n  protected abstract basePath: string;\r\n  constructor( @Inject(AngularFirestore) protected firestore: AngularFirestore  ) {\r\n  }\r\n\r\n  doc$(id: string): Observable<T> {\r\n    return this.firestore.doc<T>(`${this.basePath}/${id}`).snapshotChanges()\r\n      .pipe(\r\n        map( doc =>{\r\n          if (doc.payload.exists) {\r\n            const data = doc.payload.data() as T;\r\n            // @ts-ignore\r\n            const payloadId = doc.payload.id;\r\n            return { id: payloadId, ...data };\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  collection$( queryFn?: QueryFn): Observable<T[]> {\r\n    return this.firestore.collection<T>(`${this.basePath}`, queryFn).snapshotChanges()\r\n    .pipe( map( changes => {\r\n        return changes.map(a => {\r\n          const data = a.payload.doc.data() as T;\r\n          // @ts-ignore\r\n          data.id = a.payload.doc.id;\r\n          return data;\r\n        });\r\n      }));\r\n  }\r\n\r\n\r\n  /**\r\n   * We look for the Entity we want to add as well\r\n   * as an Optional Id, which will allow us to set\r\n   * the Entity into a specific Document in the Collection\r\n   */\r\n  add(entity: T, id?: string): Promise<T> {\r\n    // We want to create a Typed Return of the added Entity\r\n    return new Promise<T>((resolve, reject) => {\r\n      debugger\r\n      if (id) {\r\n        // If there is an ID Provided, lets specifically set the Document\r\n\r\n        this.firestore.collection(this.basePath)\r\n          .doc(id)\r\n          .set(firebaseSerialize(entity))\r\n          .then(ref => {\r\n            resolve(entity);\r\n          });\r\n      } else {\r\n        // If no ID is set, allow Firestore to Auto-Generate one\r\n        debugger\r\n        this.firestore.collection(this.basePath).add(firebaseSerialize(entity)).then(ref => {\r\n          debugger\r\n          // Let's make sure we return the newly added ID with Model\r\n          const newEntity = {\r\n            id: ref.id,\r\n            ...entity,\r\n          };\r\n          resolve(newEntity);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /** Our Update method takes the full updated Entity\r\n   * Including it's ID property which it will use to find the\r\n   * Document. This is a Hard Update.\r\n   */\r\n  update(entity: T): Promise<T> {\r\n    return new Promise<T>((resolve, reject) => {\r\n      debugger\r\n      this.firestore.collection(this.basePath)\r\n      // @ts-ignore\r\n        .doc<T>(entity.id as string)\r\n        .set(firebaseSerialize(entity))\r\n        .then(() => {\r\n          debugger\r\n          resolve({\r\n            ...entity,\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  delete(id: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.firestore.collection(this.basePath)\r\n      // @ts-ignore\r\n        .doc<T>(id)\r\n        .delete()\r\n        .then(() => {\r\n          resolve();\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    AngularFirestoreModule,\r\n  ],\r\n  exports: [\r\n    AngularFireModule,\r\n    AngularFirestoreModule,\r\n\r\n  ]\r\n})\r\nexport class TkFirebaseModule { }\r\n","/*\r\n * Public API Surface of tk-firebase\r\n */\r\n\r\nexport * from './lib/tk-firebase.service';\r\nexport * from './lib/tk-firebase.module';\r\nexport * from './lib/entity.model';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}