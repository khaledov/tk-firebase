{"version":3,"sources":["../../projects/tk-firebase/src/lib/tk-firebase.service.ts","../../projects/tk-firebase/src/lib/tk-firebase.module.ts"],"names":["firebaseSerialize","object","JSON","parse","stringify","TkFirebaseService","firestore","this","prototype","doc$","id","doc","basePath","snapshotChanges","pipe","map","payload","exists","data","payloadId","Object","assign","collection$","queryFn","collection","changes","a","add","entity","_this","Promise","resolve","reject","set","then","ref","newEntity","update","delete","Injectable","args","providedIn","AngularFirestore","decorators","type","Inject","NgModule","declarations","imports","AngularFirestoreModule","exports","AngularFireModule"],"mappings":"mkBASA,SAASA,EAAqBC,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,qBASjC,SAAAI,EAAiDC,GAAAC,KAAAD,UAAAA,SAGjDD,EAAAG,UAAAC,KAAA,SAAKC,GACH,OAAOH,KAAKD,UAAUK,IAAUJ,KAAKK,SAAQ,IAAIF,GAAMG,kBACpDC,KACCC,EAAAA,KAAK,SAAAJ,GACH,GAAIA,EAAIK,QAAQC,OAAQ,CACtB,IAAMC,EAAOP,EAAIK,QAAQE,OAEnBC,EAAYR,EAAIK,QAAQN,GAC9B,OAAAU,OAAAC,OAAA,CAASX,GAAIS,GAAcD,SAMrCb,EAAAG,UAAAc,YAAA,SAAaC,GACX,OAAOhB,KAAKD,UAAUkB,WAAc,GAAGjB,KAAKK,SAAYW,GAASV,kBAChEC,KAAMC,EAAAA,KAAK,SAAAU,GACR,OAAOA,EAAQV,KAAI,SAAAW,GACjB,IAAMR,EAAOQ,EAAEV,QAAQL,IAAIO,OAG3B,OADAA,EAAKR,GAAKgB,EAAEV,QAAQL,IAAID,GACjBQ,UAWfb,EAAAG,UAAAmB,IAAA,SAAIC,EAAWlB,GAAf,IAAAmB,EAAAtB,KAEE,OAAO,IAAIuB,SAAW,SAACC,EAASC,GAE1BtB,EAGFmB,EAAKvB,UAAUkB,WAAWK,EAAKjB,UAC5BD,IAAID,GACJuB,IAAIjC,EAAkB4B,IACtBM,MAAK,SAAAC,GACJJ,EAAQH,MAKZC,EAAKvB,UAAUkB,WAAWK,EAAKjB,UAAUe,IAAI3B,EAAkB4B,IAASM,MAAK,SAAAC,GAG3E,IAAMC,EAAShB,OAAAC,OAAA,CACbX,GAAIyB,EAAIzB,IACLkB,GAELG,EAAQK,UAWhB/B,EAAAG,UAAA6B,OAAA,SAAOT,GAAP,IAAAC,EAAAtB,KACE,OAAO,IAAIuB,SAAW,SAACC,EAASC,GAE9BH,EAAKvB,UAAUkB,WAAWK,EAAKjB,UAE5BD,IAAOiB,EAAOlB,IACduB,IAAIjC,EAAkB4B,IACtBM,MAAK,WAEJH,EAAOX,OAAAC,OAAA,GACFO,WAMbvB,EAAAG,UAAA8B,OAAA,SAAO5B,GAAP,IAAAmB,EAAAtB,KACE,OAAO,IAAIuB,SAAc,SAACC,EAASC,GACjCH,EAAKvB,UAAUkB,WAAWK,EAAKjB,UAE5BD,IAAOD,GACP4B,SACAJ,MAAK,WACJH,+JAjGTQ,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAdNC,EAAAA,iBAAgBC,WAAA,CAAA,CAAAC,KAkBRC,EAAAA,OAAML,KAAA,CAACE,EAAAA,6BCFvB,iCAXCI,EAAAA,SAAQN,KAAA,CAAC,CACRO,aAAc,GACdC,QAAS,CACPC,EAAAA,wBAEFC,QAAS,CACPC,EAAAA,kBACAF,EAAAA","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport {AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument, QueryFn} from '@angular/fire/firestore';\r\nimport { Observable } from 'rxjs';\r\nimport {map, tap} from 'rxjs/operators';\r\nimport {Entity} from './entity.model';\r\n\r\n\r\n// We need a function that will turn our JS Objects into an Object\r\n// that Firestore can work with\r\nfunction firebaseSerialize<T>(object: T) {\r\n  return JSON.parse(JSON.stringify(object));\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class TkFirebaseService<T extends Entity> {\r\n  protected abstract basePath: string;\r\n  constructor( @Inject(AngularFirestore) protected firestore: AngularFirestore  ) {\r\n  }\r\n\r\n  doc$(id: string): Observable<T> {\r\n    return this.firestore.doc<T>(`${this.basePath}/${id}`).snapshotChanges()\r\n      .pipe(\r\n        map( doc =>{\r\n          if (doc.payload.exists) {\r\n            const data = doc.payload.data() as T;\r\n            // @ts-ignore\r\n            const payloadId = doc.payload.id;\r\n            return { id: payloadId, ...data };\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  collection$( queryFn?: QueryFn): Observable<T[]> {\r\n    return this.firestore.collection<T>(`${this.basePath}`, queryFn).snapshotChanges()\r\n    .pipe( map( changes => {\r\n        return changes.map(a => {\r\n          const data = a.payload.doc.data() as T;\r\n          // @ts-ignore\r\n          data.id = a.payload.doc.id;\r\n          return data;\r\n        });\r\n      }));\r\n  }\r\n\r\n\r\n  /**\r\n   * We look for the Entity we want to add as well\r\n   * as an Optional Id, which will allow us to set\r\n   * the Entity into a specific Document in the Collection\r\n   */\r\n  add(entity: T, id?: string): Promise<T> {\r\n    // We want to create a Typed Return of the added Entity\r\n    return new Promise<T>((resolve, reject) => {\r\n      debugger\r\n      if (id) {\r\n        // If there is an ID Provided, lets specifically set the Document\r\n\r\n        this.firestore.collection(this.basePath)\r\n          .doc(id)\r\n          .set(firebaseSerialize(entity))\r\n          .then(ref => {\r\n            resolve(entity);\r\n          });\r\n      } else {\r\n        // If no ID is set, allow Firestore to Auto-Generate one\r\n        debugger\r\n        this.firestore.collection(this.basePath).add(firebaseSerialize(entity)).then(ref => {\r\n          debugger\r\n          // Let's make sure we return the newly added ID with Model\r\n          const newEntity = {\r\n            id: ref.id,\r\n            ...entity,\r\n          };\r\n          resolve(newEntity);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /** Our Update method takes the full updated Entity\r\n   * Including it's ID property which it will use to find the\r\n   * Document. This is a Hard Update.\r\n   */\r\n  update(entity: T): Promise<T> {\r\n    return new Promise<T>((resolve, reject) => {\r\n      debugger\r\n      this.firestore.collection(this.basePath)\r\n      // @ts-ignore\r\n        .doc<T>(entity.id as string)\r\n        .set(firebaseSerialize(entity))\r\n        .then(() => {\r\n          debugger\r\n          resolve({\r\n            ...entity,\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  delete(id: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.firestore.collection(this.basePath)\r\n      // @ts-ignore\r\n        .doc<T>(id)\r\n        .delete()\r\n        .then(() => {\r\n          resolve();\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    AngularFirestoreModule,\r\n  ],\r\n  exports: [\r\n    AngularFireModule,\r\n    AngularFirestoreModule,\r\n\r\n  ]\r\n})\r\nexport class TkFirebaseModule { }\r\n"]}