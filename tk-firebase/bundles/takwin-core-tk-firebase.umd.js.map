{"version":3,"file":"takwin-core-tk-firebase.umd.js","sources":["../../projects/tk-firebase/src/lib/tk-firebase.service.ts","../../projects/tk-firebase/src/lib/tk-firebase.module.ts","../../../projects/tk-firebase/src/public-api.ts","../../../projects/tk-firebase/src/takwin-core-tk-firebase.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport {AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument, QueryFn} from '@angular/fire/firestore';\r\nimport { Observable } from 'rxjs';\r\nimport {map, tap} from 'rxjs/operators';\r\nimport {Entity} from './entity.model';\r\n\r\n\r\n// We need a function that will turn our JS Objects into an Object\r\n// that Firestore can work with\r\nfunction firebaseSerialize<T>(object: T) {\r\n  return JSON.parse(JSON.stringify(object));\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class TkFirebaseService<T extends Entity> {\r\n  protected abstract basePath: string;\r\n  constructor( @Inject(AngularFirestore) protected firestore: AngularFirestore  ) {\r\n  }\r\n\r\n  doc$(id: string): Observable<T> {\r\n    return this.firestore.doc<T>(`${this.basePath}/${id}`).snapshotChanges()\r\n      .pipe(\r\n        map( doc =>{\r\n          if (doc.payload.exists) {\r\n            const data = doc.payload.data() as T;\r\n            // @ts-ignore\r\n            const payloadId = doc.payload.id;\r\n            return { id: payloadId, ...data };\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  collection$( queryFn?: QueryFn): Observable<T[]> {\r\n    return this.firestore.collection<T>(`${this.basePath}`, queryFn).snapshotChanges()\r\n    .pipe( map( changes => {\r\n        return changes.map(a => {\r\n          const data = a.payload.doc.data() as T;\r\n          // @ts-ignore\r\n          data.id = a.payload.doc.id;\r\n          return data;\r\n        });\r\n      }));\r\n  }\r\n\r\n\r\n  /**\r\n   * We look for the Entity we want to add as well\r\n   * as an Optional Id, which will allow us to set\r\n   * the Entity into a specific Document in the Collection\r\n   */\r\n  add(entity: T, id?: string): Promise<T> {\r\n    // We want to create a Typed Return of the added Entity\r\n    return new Promise<T>((resolve, reject) => {\r\n      debugger\r\n      if (id) {\r\n        // If there is an ID Provided, lets specifically set the Document\r\n\r\n        this.firestore.collection(this.basePath)\r\n          .doc(id)\r\n          .set(firebaseSerialize(entity))\r\n          .then(ref => {\r\n            resolve(entity);\r\n          });\r\n      } else {\r\n        // If no ID is set, allow Firestore to Auto-Generate one\r\n        debugger\r\n        this.firestore.collection(this.basePath).add(firebaseSerialize(entity)).then(ref => {\r\n          debugger\r\n          // Let's make sure we return the newly added ID with Model\r\n          const newEntity = {\r\n            id: ref.id,\r\n            ...entity,\r\n          };\r\n          resolve(newEntity);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /** Our Update method takes the full updated Entity\r\n   * Including it's ID property which it will use to find the\r\n   * Document. This is a Hard Update.\r\n   */\r\n  update(entity: T): Promise<T> {\r\n    return new Promise<T>((resolve, reject) => {\r\n      debugger\r\n      this.firestore.collection(this.basePath)\r\n      // @ts-ignore\r\n        .doc<T>(entity.id as string)\r\n        .set(firebaseSerialize(entity))\r\n        .then(() => {\r\n          debugger\r\n          resolve({\r\n            ...entity,\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  delete(id: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.firestore.collection(this.basePath)\r\n      // @ts-ignore\r\n        .doc<T>(id)\r\n        .delete()\r\n        .then(() => {\r\n          resolve();\r\n        });\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    AngularFirestoreModule,\r\n  ],\r\n  exports: [\r\n    AngularFireModule,\r\n    AngularFirestoreModule,\r\n\r\n  ]\r\n})\r\nexport class TkFirebaseModule { }\r\n","/*\r\n * Public API Surface of tk-firebase\r\n */\r\n\r\nexport * from './lib/tk-firebase.service';\r\nexport * from './lib/tk-firebase.module';\r\nexport * from './lib/entity.model';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["map","Injectable","AngularFirestore","Inject","NgModule","AngularFirestoreModule","AngularFireModule"],"mappings":"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"}